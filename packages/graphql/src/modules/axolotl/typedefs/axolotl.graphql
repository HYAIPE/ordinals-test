input AxolotlClaimRequest {
  claimingAddress: String!
  network: BitcoinNetwork!
  feeLevel: FeeLevel
  feePerByte: Int
  collectionId: ID!
}

input AxolotlOpenEditionRequest {
  destinationAddress: String!
  claimCount: Int
  network: BitcoinNetwork!
  feeLevel: FeeLevel
  feePerByte: Int
  collectionId: ID!
}

type AxolotlFunding {
  id: ID!
  inscriptionFunding: InscriptionFunding

  tokenId: Int!
  createdAt: String!
  destinationAddress: String!
  chameleon: Boolean!
}

type AxolotlFundingPage {
  items: [AxolotlFunding]
  totalCount: Int!
  page: Int!
  cursor: String
}

input AxolotlAvailableClaimedRequest {
  claimingAddress: String!
  collectionId: ID!
}

input AxolotlAvailableOpenEditionRequest {
  destinationAddress: String!
  collectionId: ID!
}

enum FundingStatus {
  UNVERIFIED
  UNCLAIMED
  FUNDING
  FUNDED
  GENESIS
  REVEAL
}

type AxolotlAvailableClaimedFunding {
  id: ID!
  destinationAddress: String!
  claimingAddress: String!
  status: FundingStatus!
  network: BitcoinNetwork
  funding: InscriptionFunding
  tokenId: Int
}

type AxolotlAvailableOpenEditionFunding {
  id: ID!
  destinationAddress: String!
  status: FundingStatus!
  network: BitcoinNetwork
  funding: InscriptionFunding
  tokenId: Int!
}

type Mutation {
  requestFundingAddress(request: InscriptionRequest!): InscriptionFunding!
  axolotlFundingClaimRequest(request: AxolotlClaimRequest!): [AxolotlFunding!]!
  axolotlFundingOpenEditionRequest(
    request: AxolotlOpenEditionRequest!
  ): [AxolotlFunding!]!
}

type Query {
  axolotlAvailableClaimedFundingClaims(
    request: AxolotlAvailableClaimedRequest!
  ): [AxolotlAvailableClaimedFunding!]!
  axolotlAvailableOpenEditionFundingClaims(
    request: AxolotlAvailableOpenEditionRequest!
  ): [AxolotlAvailableOpenEditionFunding!]!
}
